--CLIENTE
CREATE OR REPLACE FUNCTION MODIFICAR_CLIENTE() RETURNS TRIGGER AS $MODIFICAR_CLIENTE$
DECLARE
    VENDA_ID INTEGER;
    VP_ID INTEGER;
BEGIN
    IF TG_OP = "DELETE" THEN
        SELECT INTO VENDA_ID ID FROM CONTA C WHERE C.CLIENTE = OLD.CPF;
        SELECT INTO VP_ID ID FROM VENDA V WHERE V.CONTA = VENDA_ID;
        DELETE FROM PRODUTO_VENDA WHERE VENDA = VP.ID;
        DELETE FROM VENDA WHERE CONTA = VENDA_ID;
        DELETE FROM CONTA WHERE CLIENTE = OLD.CPF;
        RETURN OLD;
    ELSIF TG_OP = "UPDATE" THEN
        IF OLD.CPF <> NEW.CPF THEN
            UPDATE CONTA SET CLIENTE = NEW.CPF WHERE CLIENTE = OLD.CPF;
            RETURN NEW;
        END IF;
    END IF;
END;
$MODIFICAR_CLIENTE$ LANGUAGE 'plpgsql';

CREATE TRIGGER MODIFICAR_CLIENTE BEFORE DELETE OR UPDATE ON CLIENTE
FOR EACH ROW EXECUTE PROCEDURE MODIFICAR_CLIENTE();
--CONTA
CREATE OR REPLACE FUNCTION MODIFICAR_CONTA() RETURNS TRIGGER AS $MODIFICAR_CONTA$
DECLARE
    VENDA_ID INTEGER;
    VP_ID INTEGER;
BEGIN
    VENDA_ID = OLD.ID;
    SELECT INTO VP_ID ID FROM VENDA WHERE CONTA = VENDA_ID;
    DELETE FROM PRODUTO_VENDA WHERE VENDA = VP.ID;
    DELETE FROM VENDA WHERE CONTA = VENDA_ID;
    RETURN OLD;
END;
$MODIFICAR_CONTA$ LANGUAGE 'plpgsql';

CREATE TRIGGER MODIFICAR_CONTA BEFORE DELETE ON CONTA
FOR EACH ROW EXECUTE PROCEDURE MODIFICAR_CONTA();
--PRODUTO
CREATE OR REPLACE FUNCTION MODIFICAR_PRODUTO() RETURNS TRIGGER AS $MODIFICAR_PRODUTO$
BEGIN
    DELETE FROM PRODUTO_VENDA WHERE PRODUTO = OLD.ID;
    RETURN OLD;
END;
$MODIFICAR_PRODUTO$ LANGUAGE 'plpgsql';

CREATE TRIGGER MODIFICAR_PRODUTO BEFORE DELETE ON PRODUTO
FOR EACH ROW EXECUTE PROCEDURE MODIFICAR_PRODUTO();
--VENDA
CREATE OR REPLACE FUNCTION MODIFICAR_VENDA() RETURNS TRIGGER AS $MODIFICAR_VENDA$
BEGIN
    DELETE FROM PRODUTO_VENDA WHERE VENDA = OLD.ID;
    RETURN OLD;
END;
$MODIFICAR_VENDA$ LANGUAGE 'plpgsql';

CREATE TRIGGER MODIFICAR_VENDA BEFORE DELETE ON VENDA
FOR EACH ROW EXECUTE PROCEDURE MODIFICAR_VENDA();
--VENDA_PRODUTO
CREATE OR REPLACE FUNCTION VERIFICAR_SALDO() RETURNS TRIGGER AS $VERIFICAR_SALDO$
DECLARE
    CONTA_SALDO NUMERIC(10,2);
    PRODUTO_PRECO NUMERIC(10,2);
BEGIN
    SELECT INTO CONTA_SALDO C.SALDO FROM CONTA C
    JOIN VENDA V ON V.CONTA = C.ID AND V.ID = NEW.VENDA;    
    SELECT INTO PRODUTO_PRECO P.PRECO*NEW.QTD FROM PRODUTO P WHERE ID = NEW.PRODUTO;
    IF CONTA_SALDO < PRODUTO_PRECO THEN
        RAISE EXCEPTION 'Saldo insuficiente';
    END IF;
    RETURN NEW;
END;
$VERIFICAR_SALDO$ LANGUAGE 'plpgsql';

CREATE TRIGGER VERIFICAR_SALDO BEFORE INSERT ON PRODUTO_VENDA
FOR EACH ROW EXECUTE PROCEDURE VERIFICAR_SALDO();

CREATE OR REPLACE FUNCTION MONETIZAR() RETURNS TRIGGER AS $MONETIZAR$
BEGIN
    IF OLD.SALDO > NEW.SALDO THEN
	IF NEW.SALDO < 0 THEN
		RAISE EXCEPTION 'Saldo Insuficiente';
	ELSE
		INSERT INTO MONETIZACAO VALUES(OLD.ID,FALSE,OLD.SALDO-NEW.SALDO);
	END IF;
    ELSIF OLD.SALDO < NEW.SALDO THEN
        INSERT INTO MONETIZACAO VALUES(OLD.ID,TRUE,NEW.SALDO-OLD.SALDO);
    END IF;
    RETURN OLD;
END;
$MONETIZAR$ LANGUAGE 'plpgsql';

CREATE TRIGGER MONETIZAR AFTER UPDATE ON MONETIZACAO
FOR EACH ROW EXECUTE PROCEDURE MONETIZAR();